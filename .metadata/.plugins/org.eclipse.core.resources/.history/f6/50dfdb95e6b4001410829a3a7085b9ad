package VoxelSystem.CMS;

import java.util.ArrayList;
import java.util.List;

import VoxelSystem.Data.VoxelCube;

import com.jme3.math.Vector3f;

public class Tables {
	public static class Edge{
		int v1, v2;
		Vector3f point;
		Vector3f normal;
		public Edge(){}
	}
	
	//Face index -> Cube Corners
	public static int getFace[][]= new int[][]{
		{0, 4, 7, 3}, //0
		{0, 4, 5, 1}, //1
		{1, 5, 6, 2}, //2
		{2, 6, 7, 3}, //3
		{4, 5, 6, 7}, //4
		{1, 5, 6, 2}, //5
	};
	
	
	//Face index -> list of edges
	public static int getEdges[][]= new int[][]{
		{8, 7, 11, 3}, //0
		{8, 4, 9, 0}, //1
		{9, 5, 10, 1}, //2
		{10, 6, 11, 2}, //3
		{4, 5, 6, 7}, //4
		{0, 1, 2, 3}, //5
	};
	
	
	/* UNROLLED_VERTS[i] gives the four vertices (as 3-bit corner indices)
	that define face i on an ASDF cell
	*/
	public static int UNROLLED_VERTS[][] = new int[][]{
	    {2, 0, 6, 4}, // face 0
	    {1, 3, 5, 7}, // face 1
	    {0, 1, 4, 5}, // face 2
	    {6, 7, 2, 3}, // face 3
	    {2, 3, 0, 1}, // face 4
	    {4, 5, 6, 7}, // face 5
	};

	/* NEXT_POSITION[face][edge] gives the connected [face, edge]
	*/
	public static int NEXT_POSITION[][][] = new int[][][]{
	    {{3, 0}, {2, 0}, {4, 0}, {5, 0}}, // face 0
	    {{2, 1}, {3, 1}, {4, 1}, {5, 1}}, // face 1
	    {{0, 1}, {1, 0}, {4, 3}, {5, 2}}, // face 2
	    {{0, 0}, {1, 1}, {5, 3}, {4, 2}}, // face 3
	    {{0, 2}, {1, 2}, {3, 3}, {2, 2}}, // face 4
	    {{0, 3}, {1, 3}, {2, 3}, {3, 2}}, // face 5
	};

	/*
	   ---------
	   | 1 | 3 |
	   ---------
	   | 0 | 2 |
	   ---------
	  If you want to divide face f of an ASDF into four subfaces,
	  SUBCELL_FACE[f][b] gives the subface that branch b maps into
	  (or -1 if it doesn't map to a subface)
	*/
	public static int SUBCELL_FACE[][] = new int[][]{
	    { 1, -1,  0, -1,  3, -1,  2, -1},
	    {-1,  0, -1,  1, -1,  2, -1,  3},
	    { 0,  1, -1, -1,  2,  3, -1, -1},
	    {-1, -1,  2,  3, -1, -1,  0,  1},
	    { 2,  3,  0,  1, -1, -1, -1, -1},
	    {-1, -1, -1, -1,  0,  1,  2,  3}
	};

	/*
	For a given face, FACE_AXES[6][{0,1}] describes the direction pointed
	to by that face's {y,x} axes respectively.
	This direction is a 4-bit field, with the top bit as 1 for positive
	pointing and 0 for negative pointing.  The bottom 3 bits represent
	x, y, and z axes respectively (so 8|4 is pointing in the +x direction)
	*/
	public static int FACE_AXES[][] = new int[][]{
	    {0|2, 8|4},
	    {8|2, 8|4},
	    {8|1, 8|4},
	    {8|1, 0|4},
	    {8|1, 0|2},
	    {8|1, 8|2}
	};
	
	
	
	
}
