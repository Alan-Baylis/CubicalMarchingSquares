package VoxelSystem.CMS;

import java.util.ArrayList;
import java.util.List;

import VoxelSystem.Data.VoxelCube;

import com.jme3.math.Vector3f;

public class Tables {
	/***
	 * All tables based off image in documentation
	 * (picture of unwrapped cube)
	 * @author wiselion
	 */
	
	
	public static class Edge{
		int v1, v2;
		Vector3f point;
		Vector3f normal;
		public Edge(){}
	}
	
	//Face index -> Cube Corners
	public static int getFace[][]= new int[][]{
		{0, 3, 2, 1}, //0
		{1, 2, 6, 5}, //1
		{7, 4, 5, 6}, //2
		{7, 3, 0, 4}, //3
		{4, 0, 1, 5}, //4
		{6, 2, 3, 7}, //5
	};
	
	
	//Face index -> list of edges
	public static int getEdges[][]= new int[][]{
		{0, 3, 2, 1}, //0
		{5, 9, 1, 10}, //1
		{6, 7, 4, 5}, //2
		{7, 11, 3, 8}, //3
		{4, 8, 0, 9}, //4
		{6, 10 ,11, 2}, //5
	};
	
	


	/* NEXT_POSITION[face][edge # of face] gives the connected [face, edge]
	*/
	public static int NEXT_POSITION[][][] = new int[][][]{
	    {{4, 2}, {3,2}, {1,2}, {5,2}}, // face 0
	    {{2,3}, {4,3}, {0,3}, {5,1}}, // face 1
	    {{}, {}, {}, {}}, // face 2
	    {{}, {}, {}, {}}, // face 3
	    {{}, {}, {}, {}}, // face 4
	    {{}, {}, {}, {}}, // face 5
	};

	/*
	   ---------
	   | 1 | 3 |
	   ---------
	   | 0 | 2 |
	   ---------
	  If you want to divide face f of an ASDF into four subfaces,
	  SUBCELL_FACE[f][b] gives the subface that branch b maps into
	  (or -1 if it doesn't map to a subface)
	*/
	public static int SUBCELL_FACE[][] = new int[][]{
	    { 1, -1,  0, -1,  3, -1,  2, -1}, // face 0
	    {-1,  0, -1,  1, -1,  2, -1,  3}, // face 1
	    { 0,  1, -1, -1,  2,  3, -1, -1}, // face 2 
	    {-1, -1,  2,  3, -1, -1,  0,  1}, // face 3
	    { 2,  3,  0,  1, -1, -1, -1, -1}, // face 4
	    {-1, -1, -1, -1,  0,  1,  2,  3}  // face 5
	};

	/*
	For a given face, FACE_AXES[6][{0,1}] describes the direction pointed
	to by that face's {y,x} axes respectively.
	This direction is a 4-bit field, with the top bit as 1 for positive
	pointing and 0 for negative pointing.  The bottom 3 bits represent
	x, y, and z axes respectively (so 8|4 is pointing in the +x direction)
	*/
	public static int FACE_AXES[][] = new int[][]{
	    {0|2, 8|4},
	    {8|2, 8|4},
	    {8|1, 8|4},
	    {8|1, 0|4},
	    {8|1, 0|2},
	    {8|1, 8|2}
	};
	
	
	public static int getType(VoxelCube vc, int face){
		int []edges = getFace[face];
		int count = 0;
		
		for(int i=0;i<3;i++){
			if(vc.getType(edges[i])!=vc.getType(edges[i+1])){
				count++;
			}
		}
		
		if(count==2){
			return 1;
		}else if(count==4){
			return 3;
		}else if(count == 0){
			return 0;
		}else{
			throw new RuntimeException("Maybe multimat?");
		}
		
	}
	
	public static Edge[] getActiveEdges(VoxelCube vc, int face){
		int []edges = getFace[face];
		List<Edge> e = new ArrayList<Edge>();
		
		for(int i=0;i<3;i++){
			if(vc.getType(edges[i])!=vc.getType(edges[i+1])){
				Edge edge = new Edge();
				edge.v1 = i;
				edge.v2 = i+1;
				edge.point = vc.getIntersectionPoint(edges[i], new Vector3f());
				edge.normal = vc.getNormal(edges[i], new Vector3f());
				e.add(edge);
			}
		}
		
		return e.toArray(new Edge[0]);
	}
	
}
